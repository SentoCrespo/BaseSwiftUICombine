// Created by Vicente Crespo - 2020

import Foundation

{% for type in types.implementing.AutoInitUndefined %}
// MARK: - {{ type.name }} AutoInitUndefined
{##}
extension {{ type.name }} {

{# ---- METHOD SIGNATURE ----- #}
    
{{ spacing }}  {{ type.accessLevel }} init(
    {% for variable in type.variables|stored %}
        {% if not variable.annotations.skipInit %}
{{ spacing }}        {{ variable.name }}: {#
                #}{% if variable.typeName.generic.name == 'Domain.Undefined' %}{#
                    #}{{ variable.typeName.generic.typeParameters.first.typeName }}? = nil{#
                #}{% else %}{#
                    #}{{ variable.typeName }} {#
                #}{% endif %}{#
                #}{{ ',' if not forloop.last }}{#
        #}{% endif %}
    {% endfor %}) {
    
{# ---- IMPLEMENTATION ----- #}

    {% for variable in type.variables|stored %}
        {% if not variable.annotations.skipInit %}
            {% if variable.typeName.generic.name == 'Domain.Undefined' %}
{{ spacing }}        if let {{ variable.name }} = {{ variable.name }} {
{{ spacing }}            self.{{ variable.name }} = .defined({{ variable.name }})
{{ spacing }}        } else {
{{ spacing }}            self.{{ variable.name }} = .undefined
{{ spacing }}        }
            {% else %}
{{ spacing }}        self.{{ variable.name }} = {{ variable.name }}
            {% endif %}
        
        {% endif %}
        
    {% endfor %}

{{ spacing }}    }

}
{% endfor %}
