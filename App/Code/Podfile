### Configuration
inhibit_all_warnings!
use_frameworks!
source 'https://github.com/CocoaPods/Specs.git'
ENV['COCOAPODS_DISABLE_STATS'] = "true"

platform :ios, '13.0'

# Workspace definition
workspace 'BaseSwiftUICombine'

### Main Application

target 'Project' do
    
    # Project definition
    project 'Project/Project.xcodeproj'
    
    # System
    ## Version tracking
    pod 'AppVersionMonitor', '1.4.0'
    
    # User Interface
    
    ## Keyboard Manager
    pod 'IQDropDownTextField', '2.0'
    
    ## Progress HUD
    pod 'PKHUD'
    
    # Code
    
    ## Auto-Generation
    pod 'Sourcery', '1.6.0'
    pod 'R.swift', '5.4.0'
    
    ## Standard conventions
    pod 'SwiftLint', '0.39.2'
    
    # Custom Frameworks
    ## Environment
    pod 'WUEnvironment',
        :git => 'https://github.com/wundercar/environment-ios.git',
        :branch => 'develop'
    
    # Test Application
    
    target 'ProjectTests' do
        inherit! :search_paths
        
    end
    
    target 'ProjectUITests' do
        inherit! :search_paths
        
    end

end

## Post actions

post_install do |installer|
    
    puts "Setting Swift legacy for some Pods"
    installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
            
            ## Hide all warnings
            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = "YES"
            
            ## Xcode 12 fix for development target
            if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] == '8.0'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'
            end
            
            ## Fix latest Swift version
            config.build_settings['SWIFT_VERSION'] = '5.5'
            
            if [
                #'Zip'
                ].include?(target.name)
                config.build_settings['SWIFT_VERSION'] = '4.1'
            end
        end
        
    end
    
    
    target = installer.pods_project.targets.find{|t| t.to_s == "WUEnvironment"}
    target.build_configurations.each do |config|
        
        puts "Setting Swift flags for configuration #{config.name}".green
        
        # Temporary store all current Swift Flags
        s = config.build_settings['OTHER_SWIFT_FLAGS']
        
        if s == nil
            s = [ '$(inherited)' ]
        end
        
        if config.name == 'Debug'
            s.push('-DCONFIGURATION_Debug')
        end
        
        if config.name == 'Demo'
            s.push('-DCONFIGURATION_Adhoc')
        end
        
        if config.name == 'Release'
            s.push('-DCONFIGURATION_Release')
        end
        
        # Write back all previous Swift flags and the environment ones
        config.build_settings['OTHER_SWIFT_FLAGS'] = s
        
        puts "Set flags: #{s}".yellow
        
    end
    
end
